import { NextRequest, NextResponse } from 'next/server';
import type { TaxSimulationInput, TaxCalculationResult, AutofillData } from '@/types/tax-simulation';
import { createClient } from '@supabase/supabase-js';

// Fonction de calcul de l'IR selon les tranches fiscales
function calculateIR(netIncome: number, parts: number, taxBrackets: any[]): number {
  const partIncome = netIncome / parts;
  let totalTax = 0;

  for (const bracket of taxBrackets) {
    if (partIncome > bracket.min) {
      const taxableInBracket = Math.min(partIncome, bracket.max || Infinity) - bracket.min;
      if (taxableInBracket > 0) {
        totalTax += taxableInBracket * bracket.rate;
      }
    }
  }

  return totalTax * parts;
}

// Fonction de calcul de la décote avec paramètres personnalisés
function calculateDecoteWithParams(brutIR: number, situationFamiliale: 'celibataire' | 'couple', params: {
  seuilCelibataire: number;
  seuilCouple: number;
  forfaitCelibataire: number;
  forfaitCouple: number;
  taux: number;
}): { decote: number, irApresDecote: number } {
  // Déterminer les paramètres selon la situation familiale
  const isCouple = situationFamiliale === 'couple';
  const seuil = isCouple ? params.seuilCouple : params.seuilCelibataire;
  const forfait = isCouple ? params.forfaitCouple : params.forfaitCelibataire;

  // Vérifier si la décote s'applique
  if (brutIR >= seuil) {
    return { decote: 0, irApresDecote: brutIR };
  }

  // Calcul de la décote
  const decote = forfait - (brutIR * params.taux);
  const irApresDecote = Math.max(brutIR - decote, 0);

  return { decote: Math.max(decote, 0), irApresDecote };
}

// Fonction pour récupérer les paramètres fiscaux actifs depuis la base de données
async function getActiveTaxParameters(year?: number): Promise<{
  seuilCelibataire: number;
  seuilCouple: number;
  forfaitCelibataire: number;
  forfaitCouple: number;
  taux: number;
}> {
  try {
    // Créer une instance de supabase pour les API routes
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Récupérer les paramètres actifs de l'année spécifiée ou de l'année courante
    const targetYear = year || new Date().getFullYear();
    console.log('=== RECHERCHE PARAMÈTRES ===');
    console.log('Année cible:', targetYear);
    console.log('Paramètre year reçu:', year);

    const { data: taxParams, error } = await supabase
      .from('tax_parameters')
      .select('*')
      .eq('active', true)
      .eq('year', targetYear)
      .maybeSingle();

    console.log('Résultat requête:', { taxParams, error });

    if (taxParams && !error) {
      return {
        seuilCelibataire: taxParams.decote_seuil_celibataire,
        seuilCouple: taxParams.decote_seuil_couple,
        forfaitCelibataire: taxParams.decote_forfait_celibataire,
        forfaitCouple: taxParams.decote_forfait_couple,
        taux: taxParams.decote_taux
      };
    }

    // Fallback aux valeurs par défaut si pas de paramètres en base
    console.warn(`Aucun paramètre fiscal trouvé pour l'année ${targetYear}, utilisation des valeurs par défaut`);
    return {
      seuilCelibataire: 1964,
      seuilCouple: 3248,
      forfaitCelibataire: 889,
      forfaitCouple: 1470,
      taux: 0.4525
    };
  } catch (error) {
    console.error('Erreur lors de la récupération des paramètres fiscaux:', error);
    // Fallback aux valeurs par défaut en cas d'erreur
    return {
      seuilCelibataire: 1964,
      seuilCouple: 3248,
      forfaitCelibataire: 889,
      forfaitCouple: 1470,
      taux: 0.4525
    };
  }
}

// Fonction principale de calcul de simulation
async function calculateTaxSimulation(input: TaxSimulationInput, userId: string): Promise<TaxCalculationResult> {
  // Récupérer les paramètres fiscaux actifs depuis la base de données
  const taxParams = await getActiveTaxParameters(input.annee_parametres);

  console.log('=== PARAMÈTRES FISCAUX UTILISÉS ===');
  console.log('Année demandée:', input.annee_parametres);
  console.log('Seuil célibataire:', taxParams.seuilCelibataire);
  console.log('Seuil couple:', taxParams.seuilCouple);
  console.log('Forfait célibataire:', taxParams.forfaitCelibataire);
  console.log('Forfait couple:', taxParams.forfaitCouple);
  console.log('Taux décote:', taxParams.taux);

  // Configuration fiscale française 2024 (tranches et taux)
  const TAX_BRACKETS_2024 = [
    { min: 0, max: 11294, rate: 0 },
    { min: 11295, max: 28797, rate: 0.11 },
    { min: 28798, max: 82341, rate: 0.30 },
    { min: 82342, max: 177106, rate: 0.41 },
    { min: 177107, max: null, rate: 0.45 }
  ];

  const SOCIAL_SECURITY_RATE = 0.172; // 17,2%
  const ABATTEMENT_RATE = 0.10; // 10%

  const abattement = input.salaire_brut_annuel * ABATTEMENT_RATE;

  let loyers_percus_total = input.loyers_percus_total || 0;
  let charges_foncieres_total = input.charges_foncieres_total || 0;
  let pourcentage_gestion = input.pourcentage_gestion || 0;

  // Si autofill activé, les données sont déjà récupérées côté client
  // On utilise directement les valeurs envoyées depuis le formulaire
  if (input.autofill_from_db) {
    console.log('=== AUTOFILL ACTIVÉ - DONNÉES DÉJÀ RÉCUPÉRÉES CÔTÉ CLIENT ===');
    console.log('Loyers perçus (du formulaire):', loyers_percus_total);
    console.log('Charges déductibles (du formulaire):', charges_foncieres_total);
    console.log('Pourcentage gestion (du formulaire):', pourcentage_gestion);
    console.log('Inclure frais de gestion:', input.inclure_frais_gestion_autofill);
  } else {
    console.log('=== SAISIE MANUELLE ===');
    console.log('Loyers perçus (saisie manuelle):', loyers_percus_total);
    console.log('Charges déductibles (saisie manuelle):', charges_foncieres_total);
    console.log('Pourcentage gestion (saisie manuelle):', pourcentage_gestion);
  }

  // Calcul des frais de gestion
  const frais_gestion = input.inclure_frais_gestion_autofill !== false ? loyers_percus_total * (pourcentage_gestion / 100) : 0;
  console.log('Frais de gestion calculés:', frais_gestion);
  console.log('Inclure frais de gestion (décision utilisateur):', input.inclure_frais_gestion_autofill);
  console.log('Pourcentage de gestion reçu:', pourcentage_gestion);

  // Calcul du salaire imposable
  const salaire_imposable = Math.max(
    input.salaire_brut_annuel - abattement - (input.versement_PER_deductible || 0),
    0
  );

  // Calcul du revenu foncier net selon le régime
  let revenu_foncier_net = 0;
  if (loyers_percus_total > 0) {
    if (input.regime_foncier === 'micro') {
      // Abattement de 30% pour le micro-foncier
      revenu_foncier_net = loyers_percus_total * 0.70;
    } else {
      // Régime réel : loyers - charges - travaux - frais de gestion
      const totalCharges = charges_foncieres_total + (input.travaux_deja_effectues || 0) + frais_gestion;
      revenu_foncier_net = Math.max(loyers_percus_total - totalCharges, 0);

      console.log('=== DEBUG CALCUL CHARGES ===');
      console.log('Charges de base:', charges_foncieres_total);
      console.log('Travaux:', input.travaux_deja_effectues || 0);
      console.log('Frais de gestion:', frais_gestion);
      console.log('Total charges utilisées:', totalCharges);
      console.log('Loyers - Total charges:', loyers_percus_total - totalCharges);
    }
  }

  console.log('=== CALCUL REVENUS FONCIERS ===');
  console.log('Loyers perçus utilisés:', loyers_percus_total);
  console.log('Charges utilisées:', charges_foncieres_total);
  console.log('Travaux utilisés:', input.travaux_deja_effectues || 0);
  console.log('Frais de gestion utilisés:', frais_gestion);
  console.log('Revenu foncier net calculé:', revenu_foncier_net);

  // Calcul des revenus imposables pour les deux scénarios
  const autres_revenus = input.autres_revenus_imposables || 0;
  const revenus_sans_foncier = salaire_imposable + autres_revenus;
  const revenus_avec_foncier = revenus_sans_foncier + revenu_foncier_net;

  console.log('=== CALCUL REVENUS IMPOSABLES ===');
  console.log('Salaire imposable:', salaire_imposable);
  console.log('Autres revenus:', autres_revenus);
  console.log('Revenus sans foncier:', revenus_sans_foncier);
  console.log('Revenus avec foncier:', revenus_avec_foncier);

  // Calcul de l'IR pour les deux scénarios
  const IR_brut_sans_foncier = calculateIR(revenus_sans_foncier, input.parts_quotient_familial, TAX_BRACKETS_2024);
  const IR_brut_avec_foncier = calculateIR(revenus_avec_foncier, input.parts_quotient_familial, TAX_BRACKETS_2024);

  // Calcul de la décote pour les deux scénarios avec les paramètres récupérés depuis la base
  console.log('=== CALCUL DÉCOTE - VÉRIFICATION ===');
  console.log('Situation familiale:', input.situation_familiale);
  console.log('IR brut sans foncier:', IR_brut_sans_foncier);
  console.log('Seuil applicable:', input.situation_familiale === 'couple' ? taxParams.seuilCouple : taxParams.seuilCelibataire);
  console.log('Décote applicable:', IR_brut_sans_foncier < (input.situation_familiale === 'couple' ? taxParams.seuilCouple : taxParams.seuilCelibataire) ? 'OUI' : 'NON');

  const decoteSansFoncier = calculateDecoteWithParams(IR_brut_sans_foncier, input.situation_familiale, taxParams);
  const decoteAvecFoncier = calculateDecoteWithParams(IR_brut_avec_foncier, input.situation_familiale, taxParams);

  const IR_sans_foncier = decoteSansFoncier.irApresDecote;
  const IR_avec_foncier = decoteAvecFoncier.irApresDecote;

  // Calcul des prélèvements sociaux sur les revenus fonciers
  const PS_foncier = revenu_foncier_net * SOCIAL_SECURITY_RATE;

  // Calcul des totaux
  const total_sans_foncier = IR_sans_foncier;
  const total_avec_foncier = IR_avec_foncier + PS_foncier;
  const delta_impot = total_avec_foncier - total_sans_foncier;

  console.log('=== CALCUL IMPÔTS ===');
  console.log('IR brut sans foncier:', IR_brut_sans_foncier);
  console.log('IR brut avec foncier:', IR_brut_avec_foncier);
  console.log('Décote sans foncier:', decoteSansFoncier.decote);
  console.log('Décote avec foncier:', decoteAvecFoncier.decote);
  console.log('IR net sans foncier:', IR_sans_foncier);
  console.log('IR net avec foncier:', IR_avec_foncier);
  console.log('PS foncier:', PS_foncier);
  console.log('Total sans foncier:', total_sans_foncier);
  console.log('Total avec foncier:', total_avec_foncier);
  console.log('Delta impôt:', delta_impot);

  // Calcul du bénéfice net immobilier
  const totalCharges = charges_foncieres_total + (input.travaux_deja_effectues || 0) + frais_gestion;
  const benefice_brut = loyers_percus_total - totalCharges;
  const benefice_net = benefice_brut - delta_impot;

  console.log('=== CALCUL BÉNÉFICE ===');
  console.log('Total charges utilisées:', totalCharges);
  console.log('Bénéfice brut:', benefice_brut);
  console.log('Bénéfice net:', benefice_net);

  // Calcul des taux effectifs
  const taux_effectif_sans_foncier = revenus_sans_foncier > 0 ? (IR_sans_foncier / revenus_sans_foncier) * 100 : 0;
  const taux_effectif_avec_foncier = revenus_avec_foncier > 0 ? (IR_avec_foncier / revenus_avec_foncier) * 100 : 0;

  return {
    salaire_brut_annuel: input.salaire_brut_annuel,
    salaire_imposable,
    revenu_foncier_net,
    loyers_percus_total,
    charges_foncieres_total,
    frais_gestion,
    travaux_deja_effectues: input.travaux_deja_effectues || 0,
    versement_PER_deductible: input.versement_PER_deductible || 0,
    pourcentage_gestion,
    regime_foncier: input.regime_foncier,
    autofill_from_db: input.autofill_from_db || false,
    inclure_frais_gestion_autofill: input.inclure_frais_gestion_autofill,
    IR_brut_sans_foncier,
    IR_brut_avec_foncier,
    IR_sans_foncier,
    IR_avec_foncier,
    decote_sans_foncier: decoteSansFoncier.decote,
    decote_avec_foncier: decoteAvecFoncier.decote,
    PS_foncier,
    total_sans_foncier,
    total_avec_foncier,
    delta_impot,
    benefice_net,
    benefice_brut,
    total_charges: charges_foncieres_total + (input.travaux_deja_effectues || 0) + frais_gestion,
    taux_effectif_sans_foncier,
    taux_effectif_avec_foncier,
    // Ajouter les paramètres fiscaux utilisés pour affichage côté client
    tax_params: taxParams
  };
}

export async function POST(request: NextRequest) {
  try {
    const input: TaxSimulationInput = await request.json();

    // Validation des entrées
    if (!input.salaire_brut_annuel || input.salaire_brut_annuel < 0) {
      return NextResponse.json({ error: 'Salaire brut annuel requis et positif' }, { status: 400 });
    }

    if (!input.parts_quotient_familial || input.parts_quotient_familial < 1) {
      return NextResponse.json({ error: 'Parts de quotient familial requises (>= 1)' }, { status: 400 });
    }

    // Utiliser un userId temporaire pour les tests (remplacer par l'authentification réelle plus tard)
    const userId = 'temp-user-id';

    console.log('=== CALCUL SIMULATION ===');
    console.log('UserId:', userId);
    console.log('Input reçu:', input);

    const result = await calculateTaxSimulation(input, userId);

    return NextResponse.json(result);
  } catch (error) {
    console.error('Erreur lors du calcul de simulation:', error);
    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });
  }
}
